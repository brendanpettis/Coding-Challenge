.is-active {
    font-weight: bold;
}

.rokkin-red {
    background-color: #f3594d;
}

/*         <ul>

        
        {combineIngredientsAndQty(this.props.ingredients, this.props.ingredientQtyAndUnit)
          .map((comboItem) => (
          <Typography paragraph>
            <li key={comboItem}>{`${comboItem}`}</li>
          </Typography> ))}}
          
        </ul> 
        
        
          <ol>
          {this.props.steps.map((step) => 
            <Typography paragraph>
              <li key={step}>{`${step}`}</li>
            </Typography> )}
          </ol>

        
        
import React, {Component} from 'react';
import { Consumer } from '../context';
import Button from 'react-bootstrap/lib/Button';
import FormGroup from 'react-bootstrap/lib/FormGroup';
import ControlLabel from 'react-bootstrap/lib/ControlLabel';
import FormControl from 'react-bootstrap/lib/FormControl';

const formValidation = formErrors => {
    let valid = true;

    Object.values(formErrors).forEach(val => {
        val.length > 0 && (valid = false)
    });

    return valid;
}
class AddRecipePage extends Component {

    state = {
            recipe: {
                id: '',
                title: '',
                description: '',
                ingredients: [],
                ingredientQtyAndUnit: [],
                steps:[]
            },
            formErrors: {
                title: '',
                description: '',
                ingredients: '',
                ingredientQtyAndUnit: '',
                steps: ''
            }
    }

timeStamp() {
    let today = new Date();
    return today;
}   

message() {
    alert('Added!');
    console.log(this.state);
}

buildRecipeState = (title, description, ingredients, ingredientQtyAndUnit, steps) => {
    this.setState({recipe: {id: this.timeStamp().toString(), title: title, description: description, ingredients: ingredients, ingredientQtyAndUnit: ingredientQtyAndUnit, steps: steps}});
}

handleChange = e => {
    e.preventDefault();
    const {name, value} = e.target;
    let formErrors = this.state.formErrors;

    console.log("Name " + name);
    console.log("Value " + value);

    switch(name){
        case 'title':
        formErrors.title = value.length < 3 && value.length > 0 ? 'minimum 3 characters required' : '';
        break;
        case 'description':
        formErrors.description = value.length < 10 && value.length > 0 ? 'minimum 10 characters required' : '';
        break;
        case 'ingredients':
        formErrors.ingredients = value.length < 1 && value.length > 0 ? 'minimum 1 ingredient required' : '';
        break;
        case 'ingredientQtyAndUnit':
        formErrors.ingredientQtyAndUnit = value.length < 1 && value.length > 0 ? 'minimum 1 ingredient qty required' : '';
        break;
        case 'steps':
        formErrors.steps = value.length < 2 && value.length > 0 ? 'minimum 3 steps required' : '';
        break;
        default:
        break;
    }
}

render() {     
    return (
        <Consumer> 
        { props => {
            return (
            <div className='container'>
            <h3>Add Recipes</h3>
                <FormGroup controlId='formAddRecipeText'>
                    <ControlLabel>Recipe Title</ControlLabel>
                    <FormControl 
                        type="text"
                        placeholder="Enter a clever title"
                        autoFocus
                        name='title'
                        value={this.state.recipe.title}
                        onChange={(event) => this.handleChange(event) this.buildRecipeState(event.target.value, this.state.recipe.description);}
                    >
                    </FormControl>

                    <ControlLabel>Description</ControlLabel>
                    <FormControl 
                        type='text'
                        placeholder='Enter a brief description'
                        name='description'
                        value={this.state.recipe.description}
                        onChange={(event) => this.buildRecipeState(this.state.recipe.title, event.target.value, this.state.recipe.ingredients)}
                    >
                    </FormControl>

                    <ControlLabel>Ingredients</ControlLabel>
                    <FormControl 
                        type='text'
                        placeholder='Enter Recipe Ingredients (Separate with Commas)'
                        name='ingredients'
                        value={this.state.recipe.ingredients}
                        onChange={(event) => this.buildRecipeState(this.state.recipe.title, this.state.recipe.description, event.target.value.split(','))}
                    >
                    </FormControl>

                    <ControlLabel>Ingredient Quantity and Units</ControlLabel>
                    <FormControl 
                        type='text'
                        placeholder='Enter ingredient quantity with unit of measure ex.) lb, oz, gram, etc. Separate each entry with a comma'
                        name='ingredientQtyAndUnit'
                        value={this.state.recipe.ingredientQtyAndUnit}
                        onChange={(event) => this.buildRecipeState(this.state.recipe.title, this.state.recipe.description, this.state.recipe.ingredients, event.target.value.split(','))}
                    >
                    </FormControl>

                    <ControlLabel>Step by Step Instructions</ControlLabel>
                    <FormControl 
                        type='text'
                        placeholder='Enter steps for the Recipe (Separate with Commas)'
                        name='steps'
                        value={this.state.recipe.steps}
                        onChange={(event) => this.buildRecipeState(this.state.recipe.title, this.state.recipe.description, this.state.recipe.ingredients, this.state.recipe.ingredientQtyAndUnit, event.target.value.split(','))}
                    >
                    </FormControl>
            </FormGroup>     
            
            <Button bsStyle='success' onClick={() => { this.message(); props.saveNewRecipe(this.state.recipe); }}>Add</Button>        
            </div>
            );
        }}
        </Consumer>
        );
    }   
}

export default AddRecipePage;











        */